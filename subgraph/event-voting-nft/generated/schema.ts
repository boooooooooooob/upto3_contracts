// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EventVotingNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventVotingNFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EventVotingNFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EventVotingNFT", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EventVotingNFT | null {
    return changetype<EventVotingNFT | null>(
      store.get_in_block("EventVotingNFT", id)
    );
  }

  static load(id: string): EventVotingNFT | null {
    return changetype<EventVotingNFT | null>(store.get("EventVotingNFT", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get who(): string | null {
    let value = this.get("who");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set who(value: string | null) {
    if (!value) {
      this.unset("who");
    } else {
      this.set("who", Value.fromString(<string>value));
    }
  }

  get what(): string | null {
    let value = this.get("what");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set what(value: string | null) {
    if (!value) {
      this.unset("what");
    } else {
      this.set("what", Value.fromString(<string>value));
    }
  }

  get when(): BigInt | null {
    let value = this.get("when");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set when(value: BigInt | null) {
    if (!value) {
      this.unset("when");
    } else {
      this.set("when", Value.fromBigInt(<BigInt>value));
    }
  }

  get creator(): Bytes | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromBytes(<Bytes>value));
    }
  }

  get yes(): i32 {
    let value = this.get("yes");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set yes(value: i32) {
    this.set("yes", Value.fromI32(value));
  }

  get no(): i32 {
    let value = this.get("no");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set no(value: i32) {
    this.set("no", Value.fromI32(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get votes(): VoteLoader {
    return new VoteLoader(
      "EventVotingNFT",
      this.get("id")!.toString(),
      "votes"
    );
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Vote | null {
    return changetype<Vote | null>(store.get_in_block("Vote", id));
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventVotingNFT(): string {
    let value = this.get("eventVotingNFT");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set eventVotingNFT(value: string) {
    this.set("eventVotingNFT", Value.fromString(value));
  }

  get eventVotingNFTId(): string {
    let value = this.get("eventVotingNFTId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set eventVotingNFTId(value: string) {
    this.set("eventVotingNFTId", Value.fromString(value));
  }

  get voter(): Bytes | null {
    let value = this.get("voter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set voter(value: Bytes | null) {
    if (!value) {
      this.unset("voter");
    } else {
      this.set("voter", Value.fromBytes(<Bytes>value));
    }
  }

  get voteYes(): boolean {
    let value = this.get("voteYes");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set voteYes(value: boolean) {
    this.set("voteYes", Value.fromBoolean(value));
  }
}

export class VoteLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Vote[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Vote[]>(value);
  }
}
